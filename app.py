import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    Application
)

from handlers import start, button_handler, message_handler, reply_command, handle_reply_buttons

# Ø¥Ø¹Ø¯Ø§Ø¯ Ø§Ù„Ù„ÙˆØ¬Ø§Øª
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app
flask_app = Flask(__name__)

# Telegram Application
ptb_application: Application = None
ptb_loop: asyncio.AbstractEventLoop = None


# Ø¥Ø¹Ø¯Ø§Ø¯ Ø§Ù„Ù‡Ø§Ù†Ø¯Ù„Ø±Ø²
def setup_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reply", reply_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.Regex("^ðŸ“² Ø¥Ø¸Ù‡Ø§Ø± Ø§Ù„Ù‚Ø§Ø¦Ù…Ø©$"), handle_reply_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # Debug Ù„ÙƒÙ„ ØªØ­Ø¯ÙŠØ«
    async def log_all(update: Update, context):
        logger.info(f"ðŸ“© Received update: {update.to_dict()}")

    app.add_handler(MessageHandler(filters.ALL, log_all))


# Route Ù„Ù„ÙˆÙŠØ¨Ù‡ÙˆÙƒ
@flask_app.route(f"/webhook/{os.getenv('TELEGRAM_TOKEN')}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, ptb_application.bot)

    # Debug log
    print("ðŸ“© Received update:", update.to_dict())

    # Ù…Ø±Ø± Ø§Ù„ØªØ­Ø¯ÙŠØ« Ù„Ù„Ù€ Application
    asyncio.run_coroutine_threadsafe(
        ptb_application.process_update(update),
        ptb_loop   # âœ… Ø§Ø³ØªØ®Ø¯Ù… ptb_loop
    )
    return "OK", 200


@flask_app.route("/")
def index():
    return "TENTH POWER BOT is Running!", 200

if __name__ == "__main__":
    # Ø¥Ù†Ø´Ø§Ø¡ Ø§Ù„ØªØ·Ø¨ÙŠÙ‚
    ptb_app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    setup_handlers(ptb_app)

    # Ù‡Ø§Ù†Ø¯Ù„Ø± Ø§Ø®ØªØ¨Ø§Ø± (echo)
    async def echo(update: Update, context):
        await update.message.reply_text(f"ðŸ‘‹ Ø§Ù†Øª Ù‚Ù„Øª: {update.message.text}")

    ptb_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    ptb_application = ptb_app
